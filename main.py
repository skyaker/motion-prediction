# import numpy as np
# import cv2
# import l5kit
# import torch

# print("numpy version:", np.__version__)
# print("OpenCV version:", cv2.__version__)
# print("l5kit version:", l5kit.__version__)
# print("PyTorch version:", torch.__version__)
# print("MPS available:", torch.backends.mps.is_available())

# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# import folium
# import open3d as o3d
# from l5kit.data import LocalDataManager
# from l5kit.dataset import EgoDataset
# from l5kit.rasterization import build_rasterizer
# from l5kit.configs import load_config_data

# # ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Lyft Level 5
# cfg = load_config_data("config.yaml")
# dm = LocalDataManager(None)
# dataset = EgoDataset(cfg, dm, build_rasterizer(cfg, dm))

# # ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
# scene_idx = 0
# frame = dataset[scene_idx]
# history_positions = frame["history_positions"]
# predicted_positions = np.random.randn(12, 2)  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏

# # üöó –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 2D: –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
# plt.figure(figsize=(8, 6))
# plt.plot(history_positions[:, 0], history_positions[:, 1], "bo-", label="–ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è")
# plt.plot(predicted_positions[:, 0], predicted_positions[:, 1], "ro--", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è")
# plt.legend()
# plt.title("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è")
# plt.xlabel("X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞")
# plt.ylabel("Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞")
# plt.grid(True)
# plt.savefig("trajectories.png")
# plt.show()

# # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–†–¢–´: Folium
# map_center = [history_positions[-1, 1], history_positions[-1, 0]]
# m = folium.Map(location=map_center, zoom_start=16)
# for pos in history_positions:
#     folium.CircleMarker([pos[1], pos[0]], radius=3, color="blue").add_to(m)

# for pos in predicted_positions:
#     folium.CircleMarker([pos[1], pos[0]], radius=3, color="red").add_to(m)

# m.save("map.html")
# print("–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª map.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")

# # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 3D –î–ê–ù–ù–´–• LiDAR
# # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±–ª–∞–∫–æ —Ç–æ—á–µ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
# pcd = o3d.geometry.PointCloud()
# pcd.points = o3d.utility.Vector3dVector(np.random.randn(10000, 3) * 10)

# # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫
# o3d.visualization.draw_geometries([pcd])

import os
import numpy as np
from l5kit.data import ChunkedDataset
from l5kit.data import LocalDataManager

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
data_path = "lyft-motion-prediction-autonomous-vehicles"
os.environ["L5KIT_DATA_FOLDER"] = data_path
dm = LocalDataManager(None)

# –ó–∞–≥—Ä—É–∂–∞–µ–º train.zarr
zarr_path = "scenes/train.zarr"
zarr_dataset = ChunkedDataset(dm.require(zarr_path)).open()

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
print("–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {len(zarr_dataset.frames)}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: {len(zarr_dataset.scenes)}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ (–∞–≥–µ–Ω—Ç–æ–≤): {len(zarr_dataset.agents)}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(zarr_dataset.tl_faces)}")  # –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ
first_frame = zarr_dataset.frames[0]

print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ:", first_frame.dtype.names)
print("–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞:", first_frame["timestamp"])
print("–ò–Ω–¥–µ–∫—Å –∞–≥–µ–Ω—Ç–æ–≤:", first_frame["agent_index_interval"])
print("–ò–Ω–¥–µ–∫—Å —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤:", first_frame["traffic_light_faces_index_interval"])
print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–≥–æ-–∞–≤—Ç–æ–º–æ–±–∏–ª—è:", first_frame["ego_translation"])
print("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–≥–æ-–∞–≤—Ç–æ–º–æ–±–∏–ª—è:", first_frame["ego_rotation"])

# –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤ (–∞–≥–µ–Ω—Ç–æ–≤)
print("–ü–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ:")
for i, agent in enumerate(zarr_dataset.agents[:10]):
    print(f"–ê–≥–µ–Ω—Ç {i+1}:")
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {agent['centroid']}")
    print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {agent['velocity']}")
    print(f"–£–≥–æ–ª –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: {agent['yaw']}")
    print(f"–†–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞, –¥–ª–∏–Ω–∞): {agent['extent']}")

print("–ü–µ—Ä–≤—ã–µ 5 —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –≤ —Å—Ü–µ–Ω–µ:")

for i, tl in enumerate(zarr_dataset.tl_faces[:5]):
    print(f"–°–≤–µ—Ç–æ—Ñ–æ—Ä {i+1}:")
    print(f"  Face ID: {tl['face_id']}")
    print(f"  Traffic Light ID: {tl['traffic_light_id']}")
    print(f"  –°—Ç–∞—Ç—É—Å: {tl['traffic_light_face_status']}")  # 0 - –∫—Ä–∞—Å–Ω—ã–π, 1 - –∂–µ–ª—Ç—ã–π, 2 - –∑–µ–ª–µ–Ω—ã–π

